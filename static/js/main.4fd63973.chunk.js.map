{"version":3,"sources":["GlobalStyles.js","features/authorization/Auth/style.js","features/authorization/FormElements/style.js","features/authorization/FormElements/index.js","features/authorization/Auth/index.js","Navigation/style.js","Navigation/index.js","routes.js","App.js","app/store.js","serviceWorker.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","concrete","Div","styled","div","white","mercury","mineshaft","Title","p","green","Button","button","Label","label","Input","input","SpanError","span","MyTextInput","props","useField","field","meta","htmlFor","id","name","touched","error","Auth","title","initialValues","firstName","lastName","email","nickname","password","validationSchema","Yup","max","required","min","onSubmit","values","setSubmitting","require","generate","setTimeout","alert","JSON","stringify","type","placeholder","activeClassName","StyledNavedLink","NavLink","attrs","Li","li","Ul","ul","to","App","Navigation","path","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","GlobalStyles","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fd63973.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n    html {\n        box-sizing: border-box;\n    }\n\n    *, ::after, ::before {\n        box-sizing: inherit;\n    }\n\n    body {\n        font-family: 'Roboto', sans-serif;\n        background-color: ${(({theme}) => theme.color.concrete)};\n        margin: 0;\n    }\n`;\n\nexport default GlobalStyle; ","import styled from \"styled-components\";\n\nexport const Div = styled.div`\n    width: 800px;\n    margin: 150px auto 200px;\n    background-color: ${(({theme}) => theme.color.white)};\n    text-align: center;\n    padding: 30px;\n    box-shadow: 0 0 20px ${(({theme}) => theme.color.mercury)};\n    font-size: 24px;\n    color: ${(({theme}) => theme.color.mineshaft)};\n`;\n\nexport const Title = styled.p`\n    color: ${(({theme}) => theme.color.green)};\n    font-size: 64px;\n    font-weight: bold;\n    margin: 10px 10px 30px 10px;\n`;\n\nexport const Button = styled.button`\n    background-color: ${(({theme}) => theme.color.green)};\n    color: ${(({theme}) => theme.color.white)};\n    border-radius: 65px;\n    font-size: 30px;\n    font-weight: bold;\n    padding: 20px 45px;\n    border: none;\n    margin-top: 40px;\n    transition: opacity 1s, transform 0.5s;\n\n    &:hover{\n        opacity: 0.7;\n        transform: scale(1.1);\n    }\n`;\n","import styled from \"styled-components\";\n\nexport const Div = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: center;\n`;\n\nexport const Label = styled.label`\n    margin: 15px;\n    justify-self: end;\n`;\n\nexport const Input = styled.input`\n    padding: 10px;\n    border: 1px solid ${(({theme}) => theme.color.white)};\n    border-radius: 25px;\n    background-color: ${(({theme}) => theme.color.mercury)};\n    height: 37px;\n    justify-self: start;\n`;\n\nexport const SpanError = styled.span`\n    font-size: 12px;\n    color: red;\n    grid-column: 2;\n    justify-self: start;\n    padding-left: 20px;\n`;","import React from 'react';\nimport { useField } from 'formik';\nimport { Label, Input, Div, SpanError } from \"./style\";\n\nconst MyTextInput = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n        <Div>\n            <Label htmlFor={props.id || props.name}>{label}</Label>\n            <Input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <SpanError>{meta.error}</SpanError>\n            ) : null}\n        </Div>\n    );\n};\n\nexport { MyTextInput };","import React from \"react\";\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Div, Title, Button } from \"./style\";\nimport { MyTextInput } from \"../FormElements\";\n\nconst Auth = (props) => {\n    return (\n        <Div>\n            <Title>\n                {props.title}\n            </Title>\n            <Formik\n                initialValues={{\n                    firstName: '',\n                    lastName: '',\n                    email: '',\n                    nickname: '',\n                    password: '',\n                }}\n                validationSchema={Yup.object({\n                    firstName: Yup.string()\n                        .max(15, 'Must be 15 characters or less')\n                        .required('Required'),\n                    lastName: Yup.string()\n                        .max(20, 'Must be 20 characters or less')\n                        .required('Required'),\n                    email: Yup.string()\n                        .email('Invalid email address')\n                        .required('Required'),\n                    nickname: Yup.string()\n                        .max(20, 'Must be 20 characters or less')\n                        .required('Required'),\n                    password: Yup.string()\n                        .min(8, \"Must be more than 8 characters\")\n                        .required('Required'),\n                })}\n                onSubmit={(values, { setSubmitting }) => {\n                    if (values.password) {\n                        values.password = require('password-hash').generate(values.password);\n                    }\n\n                    setTimeout(() => {\n                        alert(JSON.stringify(values, null, 2));\n                        setSubmitting(false);\n                    }, 400);\n                }}\n            >\n                <Form>\n                    <MyTextInput\n                        label=\"Nazwa użytkownika: \"\n                        name=\"nickname\"\n                        type=\"text\"\n                        placeholder=\"np. robszy\"\n                    />\n                    <MyTextInput\n                        label=\"Hasło: \"\n                        name=\"password\"\n                        type=\"password\"\n                        placeholder=\"xxxxxxxxx\"\n                    />\n                    {props.title === \"Rejestracja\" ? (\n                        <>\n                            <MyTextInput\n                                label=\"Imię: \"\n                                name=\"firstName\"\n                                type=\"text\"\n                                placeholder=\"np. Robert\"\n                            />\n                            <MyTextInput\n                                label=\"Nazwisko: \"\n                                name=\"lastName\"\n                                type=\"text\"\n                                placeholder=\"np. Szydło\"\n                            />\n                            <MyTextInput\n                                label=\"E-mail: \"\n                                name=\"email\"\n                                type=\"text\"\n                                placeholder=\"np. xxxxxx@gmail.com\"\n                            />\n                        </>\n                    ) : \"\"}\n                    <Button>Zatwierdź</Button>\n                </Form>\n            </Formik>\n        </Div>\n    )\n};\n\nexport default Auth;","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nconst activeClassName = \"active\";\n\nexport const StyledNavedLink = styled(NavLink).attrs(() => ({\n    activeClassName,\n}))`\n    text-decoration: none;\n    color: ${(({theme}) => theme.color.white)};\n    padding: 15px;\n    border: 2px solid ${(({theme}) => theme.color.green)};\n    border-radius: 45px;\n\n    &:hover {\n        border: 2px solid ${(({theme}) => theme.color.white)};\n    }\n\n    &.${activeClassName} {\n        background-color: ${(({theme}) => theme.color.white)};\n        color: ${(({theme}) => theme.color.green)};\n    }\n`;\n\nexport const Li = styled.li`\n    list-style: none;\n    font-size: 24px;\n    font-weight: bold;\n    margin: 20px;\n`;\n\nexport const Ul = styled.ul`\n    background-color: ${(({theme}) => theme.color.green)};\n    margin: 0;\n    display: flex;\n    justify-content: flex-end;\n`;\n\n","import React from \"react\";\nimport { toSignIn, toSignUp } from \"../routes\";\nimport { StyledNavedLink, Li, Ul } from \"./style\";\n\nexport default () => {\n    return (\n        <nav>\n            <Ul>\n                <Li><StyledNavedLink to={toSignIn()}>Zaloguj się</StyledNavedLink></Li>\n                <Li><StyledNavedLink to={toSignUp()}>Zarejestruj się</StyledNavedLink></Li>\n            </Ul>\n        </nav>\n    )\n};","export const toSignIn = () => \"/signin\";\nexport const toSignUp = () => \"/signup\";","import React from 'react';\r\nimport { HashRouter, Switch, Route} from \"react-router-dom\";\r\nimport Auth from './features/authorization/Auth';\r\nimport Navigation from \"./Navigation\";\r\nimport { toSignIn, toSignUp } from \"./routes\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <Navigation />\r\n      <Switch>\r\n        <Route path={toSignIn()}>\r\n          <Auth title=\"Logowanie\"/>\r\n        </Route>\r\n        <Route path={toSignUp()}>\r\n          <Auth title=\"Rejestracja\"/>\r\n        </Route>\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport GlobalStyles from \"./GlobalStyles\";\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { theme } from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyles />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const theme = {\n    color: {\n        green: \"#3F733E\",\n        concrete: \"#F3F1F1\",\n        white: \"white\",\n        mercury: \"#E8E8E8\",\n        mineshaft: \"#2E2C2C\",\n    }\n}"],"sourceRoot":""}